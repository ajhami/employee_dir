{"version":3,"sources":["logo.svg","components/Navbar/Navbar.jsx","components/Searchbar/Searchbar.jsx","components/Table/Table.jsx","components/TableRows/TableRows.jsx","components/Footer/Footer.jsx","utils/randomUserAPI.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","Searchbar","props","type","name","id","value","searchedName","placeholder","Table","scope","children","TableRows","data","map","employee","key","age","email","phoneNumber","src","employeePhoto","alt","Footer","logo","axios","get","App","state","fullData","searchedData","API","then","res","employees","results","first","last","dob","phone","picture","large","setState","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,kC,uTCiB5BC,MAdf,WACI,OACI,yBAAKC,UAAU,2BACX,yBAAKA,UAAU,kBACX,uBAAGA,UAAU,WAAb,yB,MCiBDC,MArBf,SAAmBC,GACf,OACI,8BACI,yBAAKF,UAAU,OACX,yBAAKA,UAAU,UACf,yBAAKA,UAAU,SACX,2BAAOG,KAAK,OAAOC,KAAK,GAAGC,GAAG,eAAeL,UAAU,kBAAkBM,MAAOJ,EAAMK,aAAcC,YAAY,kCAEpH,yBAAKR,UAAU,WAEnB,yBAAKA,UAAU,cACX,yBAAKA,UAAU,UACf,yBAAKA,UAAU,SACX,4BAAQG,KAAK,SAASH,UAAU,mBAAhC,WAEJ,yBAAKA,UAAU,a,MCIhBS,MAnBf,SAAeP,GACX,OACI,2BAAOF,UAAU,gCACb,+BACI,4BACI,wBAAIU,MAAM,OAAV,eACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,OACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,gBACA,wBAAIA,MAAM,OAAV,cAIHR,EAAMS,W,MCSRC,MAvBf,SAAmBV,GAEf,OACI,+BACKA,EAAMW,KAAKC,KAAI,SAAAC,GAAQ,OACpB,wBAAIC,IAAKD,EAASV,IACd,4BAAKU,EAASV,IACd,4BAAKU,EAASX,MACd,4BAAKW,EAASE,KACd,4BAAKF,EAASG,OACd,4BAAKH,EAASI,aACd,4BAAI,yBAAKC,IAAKL,EAASM,cAAeC,IAAI,e,uBCO/CC,MAjBf,WACI,OACI,yBAAKvB,UAAU,2BACX,yBAAKA,UAAU,kBACX,uBAAGA,UAAU,cAAb,sBAEI,yBAAKA,UAAU,UAAUoB,IAAKI,IAAMF,IAAI,iB,iBCH7C,EACQ,WACf,OAAOG,IAAMC,IAJN,kDC4DAC,E,4MArDbC,MAAQ,CACNC,SAAU,GACVC,aAAc,I,kEAIK,IAAD,OAElBC,IACGC,MAAK,SAAAC,GACJ,IAAIC,EAAYD,EAAIpB,KAAKsB,QAEzBD,EAAYA,EAAUpB,KAAI,SAAAC,GAAQ,MAAK,CACrCV,GAAIU,EAASV,GAAGC,MAChBF,KAAMW,EAASX,KAAKgC,MAAQ,IAAMrB,EAASX,KAAKiC,KAChDpB,IAAKF,EAASuB,IAAIrB,IAClBC,MAAOH,EAASG,MAChBC,YAAaJ,EAASwB,MACtBlB,cAAeN,EAASyB,QAAQC,UAGlC,EAAKC,SAAS,CAAEb,SAAUK,EAAWJ,aAAcI,IAInDS,QAAQC,IAAI,EAAKhB,MAAMC,UACvBc,QAAQC,IAAI,EAAKhB,MAAME,mB,+BAU3B,OACE,6BACE,kBAAC,EAAD,MACA,6BACA,yBAAK9B,UAAU,aACb,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAWa,KAAMgC,KAAKjB,MAAME,iBAGhC,kBAAC,EAAD,W,GAhDUgB,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.a730d76f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg\">\r\n            <div className=\"col navTextDiv\">\r\n                <p className=\"navText\">Employee Directory</p>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Searchbar(props) {\r\n    return (\r\n        <form>\r\n            <div className=\"row\">\r\n                <div className=\"col-4\"></div>\r\n                <div className=\"col-4\">\r\n                    <input type=\"name\" name=\"\" id=\"searchedName\" className=\"nameSearchInput\" value={props.searchedName} placeholder=\"Search for employee by name.\" />\r\n                </div>\r\n                <div className=\"col-4\"></div>\r\n            </div>\r\n            <div className=\"row btnRow\">\r\n                <div className=\"col-4\"></div>\r\n                <div className=\"col-4\">\r\n                    <button type=\"submit\" className=\"btn btn-primary\">Search</button>\r\n                </div>\r\n                <div className=\"col-4\"></div>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default Searchbar;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Table(props) {\r\n    return (\r\n        <table className=\"table table-striped sortable\">\r\n            <thead>\r\n                <tr>\r\n                    <th scope=\"col\">Employee ID</th>\r\n                    <th scope=\"col\">Name</th>\r\n                    <th scope=\"col\">Age</th>\r\n                    <th scope=\"col\">Email</th>\r\n                    <th scope=\"col\">Phone Number</th>\r\n                    <th scope=\"col\">ID Photo</th>\r\n                </tr>\r\n            </thead>\r\n                {/* Table rows are passed through as a child of the Table component */}\r\n                {props.children}\r\n        </table>\r\n    )\r\n};\r\n\r\nexport default Table;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction TableRows(props) {\r\n\r\n    return (\r\n        <tbody>\r\n            {props.data.map(employee => (\r\n                <tr key={employee.id}>\r\n                    <td>{employee.id}</td>\r\n                    <td>{employee.name}</td>\r\n                    <td>{employee.age}</td>\r\n                    <td>{employee.email}</td>\r\n                    <td>{employee.phoneNumber}</td>\r\n                    <td><img src={employee.employeePhoto} alt=\"EIP\"/></td>\r\n                </tr>\r\n            ))}\r\n        </tbody>\r\n\r\n    );\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport default TableRows;","import React from \"react\";\r\nimport logo from \"./../../logo.svg\";\r\nimport \"./style.css\";\r\n\r\nfunction Footer() {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg\">\r\n            <div className=\"col navLogoDiv\">\r\n                <p className=\"footerText\">\r\n                    Powered by React.js\r\n                    <img className=\"navLogo\" src={logo} alt=\"App Logo\" />\r\n                </p>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Footer;","/////////////////////////\r\n/// RANDOMUSERSAPI.JS ///\r\n/////////////////////////\r\n\r\nimport axios from \"axios\";\r\nconst APIURL = \"https://randomuser.me/api/?results=200&nat=us\";\r\n\r\nexport default {\r\n    searchRandomUsers: function() { \r\n        return axios.get(APIURL);\r\n    }\r\n};","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from \"./components/Navbar\";\nimport Searchbar from \"./components/Searchbar\";\nimport Table from \"./components/Table\";\nimport TableRows from \"./components/TableRows\"\nimport Footer from './components/Footer/Footer';\nimport API from \"./utils/randomUserAPI\";\n// import { render } from '@testing-library/react';\n\nclass App extends Component {\n  state = {\n    fullData: [],\n    searchedData: []\n  };\n\n\n  componentDidMount() {\n\n    API.searchRandomUsers()\n      .then(res => {\n        let employees = res.data.results;\n\n        employees = employees.map(employee => ({\n          id: employee.id.value,\n          name: employee.name.first + \" \" + employee.name.last,\n          age: employee.dob.age,\n          email: employee.email,\n          phoneNumber: employee.phone,\n          employeePhoto: employee.picture.large\n        }))\n        // console.log(employees);\n        this.setState({ fullData: employees, searchedData: employees });\n        // let newState = { employees };\n        // return newState;\n        // this.setState(newState);\n        console.log(this.state.fullData);\n        console.log(this.state.searchedData);\n      })\n\n\n  };\n\n  // let employeeData = loadEmployeeData();\n  // console.log(employeeData);\n\n  render() {\n    return (\n      <div>\n        <Navbar />\n        <br />\n        <div className=\"container\">\n          <Searchbar />\n          <br />\n          <Table>\n            <TableRows data={this.state.searchedData}/>\n          </Table>\n        </div>\n        <Footer />\n      </div>\n    );\n  };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}